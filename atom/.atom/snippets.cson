# --------------------------------------------------------------
# Multi
# --------------------------------------------------------------

# Hashmark section:
'.source.ruby, .source.puppet, .source.shell, .source.yaml, .source.fish, .source.coffee, .source.cson, .text':
  'Section':
    'prefix': 'section'
    'body': """
# --------------------------------------------------------------
# ${1:Title}
# --------------------------------------------------------------
    """

# Double-slash section:
'.source.sass, .source.less, .source.js, .source.cs, .source.go':
  'Section':
    'prefix': 'section'
    'body': """
// -------------------------------------------------------------
// ${1:Title}
// -------------------------------------------------------------
    """

# --------------------------------------------------------------
# CSS
# --------------------------------------------------------------

'.source.css, .source.scss, .source.sass, .source.sass':

  # CSS section:
  'Section':
    'prefix': 'section'
    'body': """
/* ---------------------------------------------------------- *\\\\
 * ${1:Title}
\\\\* ---------------------------------------------------------- */
    """

  # Basic file layout:
  'File Layout':
    'prefix': 'layout'
    'body': """
@charset "UTF-8";

/* ---------------------------------------------------------- *\\\\
 * ${1:Title}
\\\\* ---------------------------------------------------------- */

$2
    """

  # Set to border-box as the default box model:
  'Border Box By Default':
    'prefix': 'borderbox'
    'body': """
html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}
    """

  # Link's LVHA:
  'LVHA':
    'prefix': 'lvha'
    'body': """
a {
  color: ${1:rgb(200, 0, 0)};
}

a:visited {
  color: ${2:rgb(50, 0, 0)};
}

a:hover {
  /* Lighter color. */
  color: ${3:rgb(250, 0, 0)};
}

a:active,
a:focus {
  /* Darker color. */
  color: ${4:rgb(150, 0, 0)};
}
    """

  # Clearfix:
  'Clearfix':
    'prefix': 'clearfix'
    'body': """
/**
 * Clearfix:
 * 1. Opera bug.
 * 2. Use `block` instead of `table` to preserve margin-collapsing.
 */

.clearfix::before,
.clearfix::after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

.clearfix::after {
  clear: both;
}
    """

  # Default rules for CSS:
  'Globals':
    'prefix': 'globals'
    'body': """
@charset "UTF-8";

/* ---------------------------------------------------------- *\\\\
 * Globals
\\\\* ---------------------------------------------------------- */

/**
 * Box-model:
 * 1. Change default box-model to border-box.
 * 2. All elements will inherit from the <html> box-model.
 */

html {
  box-sizing: border-box; /* 1 */
}

*,
*::before,
*::after {
  box-sizing: inherit; /* 2 */
}

/**
 * Typography:
 * 1. Change default typography (10px, 140% line-height, sans-serif).
 * 2. Set a flexible font-size on the document (1.5em, ie. 15px).
 */

html {
  font: 62.5%/1.4 Verdana, sans-serif; /* 1 */
}

body {
  font-size: 1.5em; /* 2 */
}

/**
 * Full-viewport body.
 */

body {
  position: relative;
  min-height: 100vh;
  margin: 0;
}

/**
 * Colors:
 * 1. Content.
 * 2. Overscroll.
 * 3. Document background.
 * 4. Selection.
 */

html {
  color: black; /* 1 */
  background: tomato; /* 2 */
}

body {
  background: white; /* 3 */
}

::selection { /* 4 */
  color: white;
  background: tomato;
}

/* ---------------------------------------------------------- *\\\\
 * App
\\\\* ---------------------------------------------------------- */

$1
    """

# --------------------------------------------------------------
# SCSS only.
# --------------------------------------------------------------

'.source.scss':

  'Color Functions':
    'prefix': 'funcolors'
    'body': """
// Slightly lighten a color.
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Slightly darken a color.
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}
    """

# --------------------------------------------------------------
# HTML
# --------------------------------------------------------------

'.text.html, .text.html .meta.scope.between-tag-pair, .text.html .punctuation.tag.begin':

  # Override Atom's HTML snippet:
  'HTML':
    'prefix': 'html'
    'body': """
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${1}</title>
  </head>
  <body>
    ${2}
  </body>
</html>
    """

  # Page structure:
  'Page':
    'prefix': 'page'
    'body': """
<div class="page" id="page">
  <header class="page-header" id="page_header">
  </header>

  <main class="page-content" id="page_content" role="main">
    ${2}
  </main>

  <footer class="page-footer" id="page_footer">
  </footer>
</div>

<script>
  ${1:// GA}
</script>
    """

  # Overrides:
  'Link':
    'prefix': 'link'
    'body': '<link rel="${1:stylesheet}" href="${2:master.css}">$0'

  'Script':
    'prefix': 'script'
    'body': '<script src="${1:master.js}"></script>$2'

  'Script With Code':
    'prefix': 'scriptcode'
    'body': '<script>\n\t$1\n</script>'

# --------------------------------------------------------------
# JS.
# --------------------------------------------------------------

'.source.js':

  'Module':
    'prefix': 'module'
    'body': """
'use strict'

// -------------------------------------------------------------
// Module.
// -------------------------------------------------------------

${1}

// -------------------------------------------------------------
// Exports.
// -------------------------------------------------------------

module.exports

    """

  'Documentation':
    'prefix': 'doc'
    'body': """
/**
 * ${1:Description}
 */
    """

  'React Module':
    'prefix': 'rmodule'
    'body': """
import React from 'react'

// -------------------------------------------------------------
// Module.
// -------------------------------------------------------------

export default class ${1:ComponentName} extends React.Component {
  render () {
    return (
      ${2:<div />}
    )
  }
}

    """

  'React Component':
    'prefix': 'rclass'
    'body': """
class ${1:ComponentName} extends React.Component {
  render () {
    return (
      ${2:<div />}
    )
  }
}
    """

  'React Pure Component':
    'prefix': 'rpure'
    'body': """
function ${1:PureComponentName} (props) {
  return (
    ${2:<div />}
  )
}
    """

  'Styled-JSX':
    'prefix': 'jsx'
    'body': """
<style jsx>{`
  $1
`}</style>
    """

  'Suite':
    'prefix': 'jsuite'
    'body': """
describe('${1:Description}', () => {
  ${2}
})
    """

  'Spec':
    'prefix': 'jspec'
    'body': """
it('${1:should}', () => {
  ${2}
})
    """
